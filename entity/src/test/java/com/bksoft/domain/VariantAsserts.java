package com.bksoft.domain;

import static com.bksoft.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VariantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVariantAllPropertiesEquals(Variant expected, Variant actual) {
        assertVariantAutoGeneratedPropertiesEquals(expected, actual);
        assertVariantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVariantAllUpdatablePropertiesEquals(Variant expected, Variant actual) {
        assertVariantUpdatableFieldsEquals(expected, actual);
        assertVariantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVariantAutoGeneratedPropertiesEquals(Variant expected, Variant actual) {
        assertThat(actual)
            .as("Verify Variant auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVariantUpdatableFieldsEquals(Variant expected, Variant actual) {
        assertThat(actual)
            .as("Verify Variant relevant properties")
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getStock()).as("check stock").isEqualTo(expected.getStock()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVariantUpdatableRelationshipsEquals(Variant expected, Variant actual) {
        assertThat(actual)
            .as("Verify Variant relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
